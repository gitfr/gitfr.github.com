<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0"
     xmlns:content="http://purl.org/rss/1.0/modules/content/"
     xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
     xmlns:atom="http://www.w3.org/2005/Atom"
     xmlns:dc="http://purl.org/dc/elements/1.1/"
     xmlns:wfw="http://wellformedweb.org/CommentAPI/"
     >
  <channel>
    <title>#gitfr</title>
    <link>http://www.gitfr.net/blog</link>
    <description>Projet pour la promotion du bien et la destruction du mal</description>
    <pubDate>Sun, 01 Jul 2012 14:28:23 GMT</pubDate>
    <generator>Blogofile</generator>
    <sy:updatePeriod>hourly</sy:updatePeriod>
    <sy:updateFrequency>1</sy:updateFrequency>
    <item>
      <title>Retour sur le BreizhCamp 2012</title>
      <link>http://www.gitfr.net/blog/2012/07/01/retour-sur-le-breizhcamp-2012</link>
      <pubDate>Sun, 01 Jul 2012 02:54:00 CEST</pubDate>
      <category><![CDATA[gitfr]]></category>
      <guid isPermaLink="true">http://www.gitfr.net/blog/2012/07/01/retour-sur-le-breizhcamp-2012</guid>
      <description>Retour sur le BreizhCamp 2012</description>
      <content:encoded><![CDATA[<p>Les organisateurs du <a href="http://www.breizhcamp.org/">BreihCamp</a> m'ont proposé de
monter un atelier Git de 3 heures le jeudi 14 juin. J'ai fait 2 erreurs :</p>
<ul>
<li>
<p>Ne pas demander explicitivement de voir ma présentation. Moralité
  pratiquement personne ne l'avait vu et donc la plupart avaient
  des lacunes théoriques importantes.</p>
</li>
<li>
<p>Ne pas définir un niveau (débutant, intermédiaire, confirmé),
  j'avais donc des parfaits débutants comme des utilisateurs 
  avec plusiueurs mois d'expérience.</p>
</li>
</ul>
<p>J'ai donc opté pour un atelier avec des gros morceaux de présentation
donnés au fil de l'eau quand cela était nécessaire pour comprendre
les commandes a taper.</p>
<p>Je fais donc le constat suivant :</p>
<ul>
<li>
<p>Je donnerais un atelier si et seulement si j'ai donné une présentation
  juste avant. Non obligatoire mais me permet de ne pas revenir sur la
  théorie (et tant pis pour ceux qui estiment de ne pas en avoir besoin
  mais sont à la ramasse).</p>
</li>
<li>
<p>Fixer un niveau pour l'atelier.</p>
</li>
</ul>
<p>Cela peut donc donner une journée complète de Git (pres + atelier débutant +
atelier intermédiaire). Mais avec plus de 20 présentations et 7 ateliers,
cela ne me fait pas vraiment peur. J'ai d'ailleurs totalement improvisé
cet atelier / pres de 3h :).</p>]]></content:encoded>
    </item>
    <item>
      <title>Git 1.7.11 publiée</title>
      <link>http://www.gitfr.net/blog/2012/07/01/git-1.7.11-publiee</link>
      <pubDate>Sun, 01 Jul 2012 02:52:00 CEST</pubDate>
      <category><![CDATA[release]]></category>
      <category><![CDATA[git]]></category>
      <guid isPermaLink="true">http://www.gitfr.net/blog/2012/07/01/git-1.7.11-publiee</guid>
      <description>Git 1.7.11 publiée</description>
      <content:encoded><![CDATA[<p>Deux changements intéressants dans cette 1.7.11 qui date du 18 juin :</p>
<ul>
<li>
<p>Fini la configuration par défaut qui pousse toutes les branches connues
  sur le serveur. C'est maintenant le mode <em>simple</em> qui prend le relais,
  mode qui ne pousse (si et seulement si elle possède un nom identique sur le
  serveur) que le branche courante. C'est une configuration bien plus
  pertinente pour les débutants. Néanmoins je vous préconise <strong>le mode
  upstream</strong> comme dit dans
  <a href="http://gitfr.net/blog/2011/12/11/comportement-par-defaut-du-git-push/">ce billet</a>.</p>
</li>
<li>
<p>Un outil en shell du nom de <em>git-subtree.sh</em> est ajoutée dans la section
  contrib, outil qui simplifie le découpage ou la fusion de dépôt. Cela
  permet par exemple de se dispenser de submodules en intégrant un dépôt
  dans un autre dépôt.</p>
</li>
</ul>
<p>N'hésitez pas comme d'habitude à commenter ce billet si vous voyez des 
changements intéressants.</p>
<h2>Le changelog</h2>
<ul>
<li>
<p>A new mode for push, "simple", which is a cross between "current"
  and "upstream", has been introduced. "git push" without any refspec
  will push the current branch out to the same name at the remote
  repository only when it is set to track the branch with the same
  name over there.  The plan is to make this mode the new default
  value when push.default is not configured.</p>
</li>
<li>
<p>A couple of commands learned the "--column" option to produce
  columnar output.</p>
</li>
<li>
<p>A third-party tool "git subtree" is distributed in contrib/</p>
</li>
<li>
<p>A remote helper that acts as a proxy and caches ssl session for the
  https:// transport is added to the contrib/ area.</p>
</li>
<li>
<p>Error messages given when @{u} is used for a branch without its
  upstream configured have been clarified.</p>
</li>
<li>
<p>Even with the "-q"uiet option, "checkout" used to report setting up
  tracking.  Also "branch" learned the "-q"uiet option to squelch
  informational message.</p>
</li>
<li>
<p>Your build platform may support hardlinks but you may prefer not to
  use them, e.g. when installing to DESTDIR to make a tarball and
  untarring on a filesystem that has poor support for hardlinks.
  There is a Makefile option NO_INSTALL_HARDLINKS for you.</p>
</li>
<li>
<p>The smart-http backend used to always override GIT_COMMITTER_*
  variables with REMOTE_USER and REMOTE_ADDR, but these variables are
  now preserved when set.</p>
</li>
<li>
<p>"git am" learned the "--include" option, which is an opposite of
  existing the "--exclude" option.</p>
</li>
<li>
<p>When "git am -3" needs to fall back to an application of the patch
  to a synthesized preimage followed by a 3-way merge, the paths that
  needed such treatment are now reported to the end user, so that the
  result in them can be eyeballed with extra care.</p>
</li>
<li>
<p>The output from "diff/log --stat" used to always allocate 4 columns
  to show the number of modified lines, but not anymore.</p>
</li>
<li>
<p>"git difftool" learned the "--dir-diff" option to spawn external
  diff tools that can compare two directory hierarchies at a time
  after populating two temporary directories, instead of running an
  instance of the external tool once per a file pair.</p>
</li>
<li>
<p>The "fmt-merge-msg" command learned to list the primary contributors
  involved in the side topic you are merging in a comment in the merge
  commit template.</p>
</li>
<li>
<p>"git rebase" learned to optionally keep commits that do not
  introduce any change in the original history.</p>
</li>
<li>
<p>"git push --recurse-submodules" learned to optionally look into the
  histories of submodules bound to the superproject and push them
  out.</p>
</li>
<li>
<p>A 'snapshot' request to "gitweb" honors If-Modified-Since: header,
  based on the commit date.</p>
</li>
<li>
<p>"gitweb" learned to highlight the patch it outputs even more.</p>
</li>
<li>
<p>"git svn" used to die with unwanted SIGPIPE when talking with an HTTP
  server that uses keep-alive.</p>
</li>
<li>
<p>"git svn" learned to use platform specific authentication
  providers, e.g. gnome-keyring, kwallet, etc.</p>
</li>
<li>
<p>"git p4" has been moved out of the contrib/ area and has seen more
  work on importing labels as tags from (and exporting tags as labels
  to) p4.</p>
</li>
<li>
<p>Bash completion script (in contrib/) have been cleaned up to make
  future work on it simpler.</p>
</li>
<li>
<p>An experimental "version 4" format of the index file has been
  introduced to reduce on-disk footprint and I/O overhead.</p>
</li>
<li>
<p>"git archive" learned to produce its output without reading the
  blob object it writes out in memory in its entirety.</p>
</li>
<li>
<p>"git index-pack" that runs when fetching or pushing objects to
  complete the packfile on the receiving end learned to use multiple
  threads to do its job when available.</p>
</li>
<li>
<p>The code to compute hash values for lines used by the internal diff
  engine was optimized on little-endian machines, using the same
  trick the kernel folks came up with.</p>
</li>
<li>
<p>"git apply" had some memory leaks plugged.</p>
</li>
<li>
<p>Setting up a revision traversal with many starting points was
  inefficient as these were placed in a date-order priority queue
  one-by-one.  Now they are collected in the queue unordered first,
  and sorted immediately before getting used.</p>
</li>
<li>
<p>More lower-level commands learned to use the streaming API to read
  from the object store without keeping everything in core.</p>
</li>
<li>
<p>The weighting parameters to suggestion command name typo have been
  tweaked, so that "git tags" will suggest "tag?" and not "stage?".</p>
</li>
<li>
<p>Because "sh" on the user's PATH may be utterly broken on some
  systems, run-command API now uses SHELL_PATH, not /bin/sh, when
  spawning an external command (not applicable to Windows port).</p>
</li>
<li>
<p>The API to iterate over the refs/ hierarchy has been tweaked to
  allow walking only a subset of it more efficiently.</p>
</li>
<li>
<p>"git submodule init" used to report "registered for path ..."
  even for submodules that were registered earlier.
  (cherry-pick c1c259e jl/submodule-report-new-path-once later to maint).</p>
</li>
<li>
<p>"git diff --stat" used to fully count a binary file with modified
  execution bits whose contents is unmodified, which was not quite
  right.</p>
</li>
</ul>]]></content:encoded>
    </item>
    <item>
      <title>Git 1.7.10 publiée</title>
      <link>http://www.gitfr.net/blog/2012/04/15/git-1.7.10-publiee</link>
      <pubDate>Sun, 15 Apr 2012 22:52:00 CEST</pubDate>
      <category><![CDATA[release]]></category>
      <category><![CDATA[git]]></category>
      <guid isPermaLink="true">http://www.gitfr.net/blog/2012/04/15/git-1.7.10-publiee</guid>
      <description>Git 1.7.10 publiée</description>
      <content:encoded><![CDATA[<p>Pas mal de petites changements dans cette version 1.7.10 sortie le 10 avril. Je
voulais initialement tester cette version avant de publier l'annonce mais je
n'ai pas eu le cou^H^H^Htemps :(. Mais rapidement de ce qu'ai pu voir :</p>
<ul>
<li>
<p>gitk a pas mal de petites évolutions.</p>
</li>
<li>
<p>Un éditeur s'ouvre lors d'un <code>git-commit</code> pour pousser les gens à expliquer
  les changements.</p>
</li>
<li>
<p>On peut cloner qu'un répertoire.</p>
</li>
</ul>
<p>N'hésitez pas comme d'habitude à commenter ce billet si vous voyez des 
changements intéressants dans votre façon de travailler avec Git.</p>
<h2>Le changelog</h2>
<ul>
<li>
<p>various "gitk" updates.</p>
</li>
<li>
<p>Teams for localizing the messages from the Porcelain layer of
  commands are starting to form, thanks to Jiang Xin who volunteered
  to be the localization coordinator.  Translated messages for
  simplified Chinese, Swedish and Portuguese are available.</p>
</li>
<li>
<p>The configuration mechanism learned an "include" facility; an
  assignment to the include.path pseudo-variable causes the named
  file to be included in-place when Git looks up configuration
  variables.</p>
</li>
<li>
<p>A content filter (clean/smudge) used to be just a way to make the
  recorded contents "more useful", and allowed to fail; a filter can
  now optionally be marked as "required".</p>
</li>
<li>
<p>Options whose names begin with "--no-" (e.g. the "--no-verify"
  option of the "git commit" command) can be negated by omitting
  "no-" from its name, e.g. "git commit --verify".</p>
</li>
<li>
<p>"git am" learned to pass "-b" option to underlying "git mailinfo", so
  that a bracketed string other than "PATCH" at the beginning can be kept.</p>
</li>
<li>
<p>"git clone" learned "--single-branch" option to limit cloning to a
  single branch (surprise!); tags that do not point into the history
  of the branch are not fetched.</p>
</li>
<li>
<p>"git clone" learned to detach the HEAD in the resulting repository
  when the user specifies a tag with "--branch" (e.g., "--branch=v1.0").
  Clone also learned to print the usual "detached HEAD" advice in such
  a case, similar to "git checkout v1.0".</p>
</li>
<li>
<p>When showing a patch while ignoring whitespace changes, the context
  lines are taken from the postimage, in order to make it easier to
  view the output.</p>
</li>
<li>
<p>"git diff --stat" learned to adjust the width of the output on
  wider terminals, and give more columns to pathnames as needed.</p>
</li>
<li>
<p>"diff-highlight" filter (in contrib/) was updated to produce more
  aesthetically pleasing output.</p>
</li>
<li>
<p>"fsck" learned "--no-dangling" option to omit dangling object
  information.</p>
</li>
<li>
<p>"git log -G" and "git log -S" learned to pay attention to the "-i"
  option.  With "-i", "log -G" ignores the case when finding patch
  hunks that introduce or remove a string that matches the given
  pattern.  Similarly with "-i", "log -S" ignores the case when
  finding the commit the given block of text appears or disappears
  from the file.</p>
</li>
<li>
<p>"git merge" in an interactive session learned to spawn the editor
  by default to let the user edit the auto-generated merge message,
  to encourage people to explain their merges better. Legacy scripts
  can export GIT_MERGE_AUTOEDIT=no to retain the historical behavior.
  Both "git merge" and "git pull" can be given --no-edit from the
  command line to accept the auto-generated merge message.</p>
</li>
<li>
<p>The advice message given when the user didn't give enough clue on
  what to merge to "git pull" and "git merge" has been updated to
  be more concise and easier to understand.</p>
</li>
<li>
<p>"git push" learned the "--prune" option, similar to "git fetch".</p>
</li>
<li>
<p>The whole directory that houses a top-level superproject managed by
  "git submodule" can be moved to another place.</p>
</li>
<li>
<p>"git symbolic-ref" learned the "--short" option to abbreviate the
  refname it shows unambiguously.</p>
</li>
<li>
<p>"git tag --list" can be given "--points-at <object>" to limit its
  output to those that point at the given object.</p>
</li>
<li>
<p>"gitweb" allows intermediate entries in the directory hierarchy
  that leads to a project to be clicked, which in turn shows the
  list of projects inside that directory.</p>
</li>
<li>
<p>"gitweb" learned to read various pieces of information for the
  repositories lazily, instead of reading everything that could be
  needed (including the ones that are not necessary for a specific
  task).</p>
</li>
<li>
<p>Project search in "gitweb" shows the substring that matched in the
  project name and description highlighted.</p>
</li>
<li>
<p>HTTP transport learned to authenticate with a proxy if needed.</p>
</li>
<li>
<p>A new script "diffall" is added to contrib/; it drives an
  external tool to perform a directory diff of two Git revisions
  in one go, unlike "difftool" that compares one file at a time.</p>
</li>
<li>
<p>Improved handling of views, labels and branches in "git-p4" (in contrib).</p>
</li>
<li>
<p>"git-p4" (in contrib) suffered from unnecessary merge conflicts when
  p4 expanded the embedded $RCS$-like keywords; it can be now told to
  unexpand them.</p>
</li>
<li>
<p>Some "git-svn" updates.</p>
</li>
<li>
<p>"vcs-svn"/"svn-fe" learned to read dumps with svn-deltas and
  support incremental imports.</p>
</li>
<li>
<p>"git difftool/mergetool" learned to drive DeltaWalker.</p>
</li>
<li>
<p>Unnecessary calls to parse_object() "git upload-pack" makes in
  response to "git fetch", have been eliminated, to help performance
  in repositories with excessive number of refs.</p>
</li>
<li>
<p>Recursive call chains in "git index-pack" to deal with long delta
  chains have been flattened, to reduce the stack footprint.</p>
</li>
<li>
<p>Use of add_extra_ref() API is now gone, to make it possible to
  cleanly restructure the overall refs API.</p>
</li>
<li>
<p>The command line parser of "git pack-objects" now uses parse-options
  API.</p>
</li>
<li>
<p>The test suite supports the new "test_pause" helper function.</p>
</li>
<li>
<p>Parallel to the test suite, there is a beginning of performance
  benchmarking framework.</p>
</li>
<li>
<p>t/Makefile is adjusted to prevent newer versions of GNU make from
  running tests in seemingly random order.</p>
</li>
<li>
<p>The code to check if a path points at a file beyond a symbolic link
  has been restructured to be thread-safe.</p>
</li>
<li>
<p>When pruning directories that has become empty during "git prune"
  and "git prune-packed", call closedir() that iterates over a
  directory before rmdir() it.</p>
</li>
<li>
<p>Build with NO_PERL_MAKEMAKER was broken and Git::I18N did not work
  with versions of Perl older than 5.8.3.
  (merge 5eb660e ab/perl-i18n later to maint).</p>
</li>
<li>
<p>"git tag -s" honored "gpg.program" configuration variable since
  1.7.9, but "git tag -v" and "git verify-tag" didn't.
  (merge a2c2506 az/verify-tag-use-gpg-config later to maint).</p>
</li>
<li>
<p>"configure" script learned to take "--with-sane-tool-path" from the
  command line to record SANE_TOOL_PATH (used to avoid broken platform
  tools in /usr/bin) in config.mak.autogen.  This may be useful for
  people on Solaris who have saner tools outside /usr/xpg[46]/bin.</p>
</li>
<li>
<p>zsh port of bash completion script needed another workaround.</p>
</li>
<li>
<p>git-gui updated to 0.16.0.</p>
</li>
<li>
<p>git-p4 (in contrib/) updates.</p>
</li>
<li>
<p>Git uses gettext to translate its most common interface messages
  into the user's language if translations are available and the
  locale is appropriately set. Distributors can drop new PO files
  in po/ to add new translations.</p>
</li>
<li>
<p>The code to handle username/password for HTTP transactions used in
  "git push" &amp; "git fetch" learned to talk "credential API" to
  external programs to cache or store them, to allow integration with
  platform native keychain mechanisms.</p>
</li>
<li>
<p>The input prompts in the terminal use our own getpass() replacement
  when possible. HTTP transactions used to ask for the username without
  echoing back what was typed, but with this change you will see it as
  you type.</p>
</li>
<li>
<p>The internals of "revert/cherry-pick" have been tweaked to prepare
  building more generic "sequencer" on top of the implementation that
  drives them.</p>
</li>
<li>
<p>"git rev-parse FETCH_HEAD" after "git fetch" without specifying
  what to fetch from the command line will now show the commit that
  would be merged if the command were "git pull".</p>
</li>
<li>
<p>"git add" learned to stream large files directly into a packfile
  instead of writing them into individual loose object files.</p>
</li>
<li>
<p>"git checkout -B <current branch> <elsewhere>" is a more intuitive
  way to spell "git reset --keep <elsewhere>".</p>
</li>
<li>
<p>"git checkout" and "git merge" learned "--no-overwrite-ignore" option
  to tell Git that untracked and ignored files are not expendable.</p>
</li>
<li>
<p>"git commit --amend" learned "--no-edit" option to say that the
  user is amending the tree being recorded, without updating the
  commit log message.</p>
</li>
<li>
<p>"git commit" and "git reset" re-learned the optimization to prime
  the cache-tree information in the index, which makes it faster to
  write a tree object out after the index entries are updated.</p>
</li>
<li>
<p>"git commit" detects and rejects an attempt to stuff NUL byte in
  the commit log message.</p>
</li>
<li>
<p>"git commit" learned "-S" to GPG-sign the commit; this can be shown
  with the "--show-signature" option to "git log".</p>
</li>
<li>
<p>fsck and prune are relatively lengthy operations that still go
  silent while making the end-user wait. They learned to give progress
  output like other slow operations.</p>
</li>
<li>
<p>The set of built-in function-header patterns for various languages
  knows MATLAB.</p>
</li>
<li>
<p>"git log --format='<format>'" learned new %g[nNeE] specifiers to
  show information from the reflog entries when walking the reflog
  (i.e. with "-g").</p>
</li>
<li>
<p>"git pull" can be used to fetch and merge an annotated/signed tag,
  instead of the tip of a topic branch. The GPG signature from the
  signed tag is recorded in the resulting merge commit for later
  auditing.</p>
</li>
<li>
<p>"git log" learned "--show-signature" option to show the signed tag
  that was merged that is embedded in the merge commit. It also can
  show the signature made on the commit with "git commit -S".</p>
</li>
<li>
<p>"git branch --edit-description" can be used to add descriptive text
  to explain what a topic branch is about.</p>
</li>
<li>
<p>"git fmt-merge-msg" learned to take the branch description into
  account when preparing a merge summary that "git merge" records
  when merging a local branch.</p>
</li>
<li>
<p>"git request-pull" has been updated to convey more information
  useful for integrators to decide if a topic is worth merging and
  what is pulled is indeed what the requestor asked to pull,
  including:</p>
</li>
<li>
<p>the tip of the branch being requested to be merged;</p>
</li>
<li>the branch description describing what the topic is about;</li>
<li>
<p>the contents of the annotated tag, when requesting to pull a tag.</p>
</li>
<li>
<p>"git pull" learned to notice 'pull.rebase' configuration variable,
  which serves as a global fallback for setting 'branch.<name>.rebase'
  configuration variable per branch.</p>
</li>
<li>
<p>"git tag" learned "--cleanup" option to control how the whitespaces
  and empty lines in tag message are cleaned up.</p>
</li>
<li>
<p>"gitweb" learned to show side-by-side diff.</p>
</li>
</ul>]]></content:encoded>
    </item>
    <item>
      <title>Présentation Git le 12/04 à Lausanne</title>
      <link>http://www.gitfr.net/blog/2012/03/30/presentation-git-le-12-04-a-lausanne</link>
      <pubDate>Fri, 30 Mar 2012 09:40:00 CEST</pubDate>
      <category><![CDATA[atelier]]></category>
      <category><![CDATA[gitfr]]></category>
      <guid isPermaLink="true">http://www.gitfr.net/blog/2012/03/30/presentation-git-le-12-04-a-lausanne</guid>
      <description>Présentation Git le 12/04 à Lausanne</description>
      <content:encoded><![CDATA[<p>gitfr sort de France pour diffuser la bonne parole en Suisse, et plus
précisemment à Lausanne. C'est organisé par le JUGL, le <em>Java User Group de
Lausanne</em>, et la présentation démarre à 18h30 dans <a href="http://jugl.myxwiki.org/xwiki/bin/view/Main/OCTOLausanne">les locaux
d'Octo</a>.</p>
<p>Toutes les infos sur le site du <a href="http://jugl.myxwiki.org/xwiki/bin/view/Main/WebHome">JUGL</a>.</p>]]></content:encoded>
    </item>
    <item>
      <title>Mise à jour de la présentation Git</title>
      <link>http://www.gitfr.net/blog/2012/02/01/mise-a-jour-de-la-presentation-git</link>
      <pubDate>Wed, 01 Feb 2012 00:50:00 CET</pubDate>
      <category><![CDATA[gitfr]]></category>
      <guid isPermaLink="true">http://www.gitfr.net/blog/2012/02/01/mise-a-jour-de-la-presentation-git</guid>
      <description>Mise à jour de la présentation Git</description>
      <content:encoded><![CDATA[<p>Demander à cor et à cri depuis de mois, j'ai mis à jour la présentation 
le <a href="https://github.com/sdouche/showoff-presentation-git">dépôt Git</a> et la
<a href="http://presentation-git.heroku.com/">présentation en ligne</a>. Il y'a malheureusement
des petits soucis d'affichage des images mais un rafraichissement règle en
général le problème.</p>]]></content:encoded>
    </item>
    <item>
      <title>Présentation Git le 13/02 à Montpellier</title>
      <link>http://www.gitfr.net/blog/2012/02/01/presentation-git-le-13-02-a-montpellier</link>
      <pubDate>Wed, 01 Feb 2012 00:30:00 CET</pubDate>
      <category><![CDATA[atelier]]></category>
      <category><![CDATA[gitfr]]></category>
      <guid isPermaLink="true">http://www.gitfr.net/blog/2012/02/01/presentation-git-le-13-02-a-montpellier</guid>
      <description>Présentation Git le 13/02 à Montpellier</description>
      <content:encoded><![CDATA[<p>gitfr ne sera jamais descendu plus bas que ce 13 février puisque c'est la
belle ville de Montpellier qui aura l'honneur d'une présentation Git ;).</p>
<p>C'est le MontpellierJUG qui organise cette soirée à l'université Montpellier
II. Toutes les infos et inscription sur <a href="https://www.eventbrite.com/event/2870566943?nomo=1">cette page</a>.</p>]]></content:encoded>
    </item>
    <item>
      <title>Git 1.7.9 publiée</title>
      <link>http://www.gitfr.net/blog/2012/01/28/git-1.7.9-publiee</link>
      <pubDate>Sat, 28 Jan 2012 21:13:00 CET</pubDate>
      <category><![CDATA[release]]></category>
      <category><![CDATA[git]]></category>
      <guid isPermaLink="true">http://www.gitfr.net/blog/2012/01/28/git-1.7.9-publiee</guid>
      <description>Git 1.7.9 publiée</description>
      <content:encoded><![CDATA[<p>La version 1.7.9 est sortie le 27 janvier avec plusieurs évolutions
intéressantes : </p>
<ul>
<li>
<p>Un meilleur support des gros fichiers (Git n'étant pas réputé pour ça).</p>
</li>
<li>
<p>La signature des commits, qui fait suite au piratage de la machine qui 
  héberge le dépôt Git du projet Linux de Linus Torvalds.</p>
</li>
<li>
<p>L'internationalisation est maintenant activée (honte à moi, toujours pas
  démarré le projet de traduction en Français).</p>
</li>
<li>
<p>La possibilité d'ajouter une description à une branche.</p>
</li>
<li>
<p>L'option <code>--no-edit</code> quand on amende un commit. </p>
</li>
</ul>
<p>Je vous laisse comme d'habitude lire le changelog mais je trouve cette version
bien excitente ! J'attends la mise à jour sur ma machine pour faire quelques
tests.</p>
<h2>Le changelog</h2>
<ul>
<li>
<p>gitk updates accumulated since early 2011.</p>
</li>
<li>
<p>git-gui updated to 0.16.0.</p>
</li>
<li>
<p>git-p4 (in contrib/) updates.</p>
</li>
<li>
<p>Git uses gettext to translate its most common interface messages
  into the user's language if translations are available and the
  locale is appropriately set. Distributors can drop new PO files
  in po/ to add new translations.</p>
</li>
<li>
<p>The code to handle username/password for HTTP transactions used in
  "git push" &amp; "git fetch" learned to talk "credential API" to
  external programs to cache or store them, to allow integration with
  platform native keychain mechanisms.</p>
</li>
<li>
<p>The input prompts in the terminal use our own getpass() replacement
  when possible. HTTP transactions used to ask for the username without
  echoing back what was typed, but with this change you will see it as
  you type.</p>
</li>
<li>
<p>The internals of "revert/cherry-pick" have been tweaked to prepare
  building more generic "sequencer" on top of the implementation that
  drives them.</p>
</li>
<li>
<p>"git rev-parse FETCH_HEAD" after "git fetch" without specifying
  what to fetch from the command line will now show the commit that
  would be merged if the command were "git pull".</p>
</li>
<li>
<p>"git add" learned to stream large files directly into a packfile
  instead of writing them into individual loose object files.</p>
</li>
<li>
<p>"git checkout -B <current branch> <elsewhere>" is a more intuitive
  way to spell "git reset --keep <elsewhere>".</p>
</li>
<li>
<p>"git checkout" and "git merge" learned "--no-overwrite-ignore" option
  to tell Git that untracked and ignored files are not expendable.</p>
</li>
<li>
<p>"git commit --amend" learned "--no-edit" option to say that the
  user is amending the tree being recorded, without updating the
  commit log message.</p>
</li>
<li>
<p>"git commit" and "git reset" re-learned the optimization to prime
  the cache-tree information in the index, which makes it faster to
  write a tree object out after the index entries are updated.</p>
</li>
<li>
<p>"git commit" detects and rejects an attempt to stuff NUL byte in
  the commit log message.</p>
</li>
<li>
<p>"git commit" learned "-S" to GPG-sign the commit; this can be shown
  with the "--show-signature" option to "git log".</p>
</li>
<li>
<p>fsck and prune are relatively lengthy operations that still go
  silent while making the end-user wait. They learned to give progress
  output like other slow operations.</p>
</li>
<li>
<p>The set of built-in function-header patterns for various languages
  knows MATLAB.</p>
</li>
<li>
<p>"git log --format='<format>'" learned new %g[nNeE] specifiers to
  show information from the reflog entries when walking the reflog
  (i.e. with "-g").</p>
</li>
<li>
<p>"git pull" can be used to fetch and merge an annotated/signed tag,
  instead of the tip of a topic branch. The GPG signature from the
  signed tag is recorded in the resulting merge commit for later
  auditing.</p>
</li>
<li>
<p>"git log" learned "--show-signature" option to show the signed tag
  that was merged that is embedded in the merge commit. It also can
  show the signature made on the commit with "git commit -S".</p>
</li>
<li>
<p>"git branch --edit-description" can be used to add descriptive text
  to explain what a topic branch is about.</p>
</li>
<li>
<p>"git fmt-merge-msg" learned to take the branch description into
  account when preparing a merge summary that "git merge" records
  when merging a local branch.</p>
</li>
<li>
<p>"git request-pull" has been updated to convey more information
  useful for integrators to decide if a topic is worth merging and
  what is pulled is indeed what the requestor asked to pull,
  including:</p>
</li>
<li>
<p>the tip of the branch being requested to be merged;</p>
</li>
<li>the branch description describing what the topic is about;</li>
<li>
<p>the contents of the annotated tag, when requesting to pull a tag.</p>
</li>
<li>
<p>"git pull" learned to notice 'pull.rebase' configuration variable,
   which serves as a global fallback for setting 'branch.<name>.rebase'
   configuration variable per branch.</p>
</li>
<li>
<p>"git tag" learned "--cleanup" option to control how the whitespaces
   and empty lines in tag message are cleaned up.</p>
</li>
<li>
<p>"gitweb" learned to show side-by-side diff.</p>
</li>
</ul>]]></content:encoded>
    </item>
    <item>
      <title>Présentation et atelier Git le 20/02 à Lyon</title>
      <link>http://www.gitfr.net/blog/2012/01/26/presentation-et-atelier-git-le-20-02-a-lyon</link>
      <pubDate>Thu, 26 Jan 2012 21:07:00 CET</pubDate>
      <category><![CDATA[atelier]]></category>
      <category><![CDATA[gitfr]]></category>
      <guid isPermaLink="true">http://www.gitfr.net/blog/2012/01/26/presentation-et-atelier-git-le-20-02-a-lyon</guid>
      <description>Présentation et atelier Git le 20/02 à Lyon</description>
      <content:encoded><![CDATA[<p>gitfr repart à Lyon pour un combo présentation + atelier sur une journée. Cela
se passera le 20 février dans les locaux d'Alptis, 25 cours Albert Thomas, de
14h à 21h (8h de conf, même pas peur !).</p>
<p>Si je vous dis que les inscriptions sont déjà closes, vous me croyez ? Désolé,
j'ai raté l'ouverture des inscriptions.</p>]]></content:encoded>
    </item>
    <item>
      <title>La commande diff</title>
      <link>http://www.gitfr.net/blog/2012/01/26/la-commande-diff</link>
      <pubDate>Thu, 26 Jan 2012 15:48:00 CET</pubDate>
      <category><![CDATA[git git-diff]]></category>
      <guid isPermaLink="true">http://www.gitfr.net/blog/2012/01/26/la-commande-diff</guid>
      <description>La commande diff</description>
      <content:encoded><![CDATA[<p>Vous connaissez surement la commande <code>git-diff</code>, puisqu'elle existe sur Hg ou
SVN. Mais comme d'habitude, git fourmille de possibilités. Petit tour
d'horizon.</p>
<h2>Le base</h2>
<p>Commençons par le basique. Pour connaître les différences entre votre
répertoire de travail et votre index :</p>
<blockquote>
<p>$ git diff</p>
</blockquote>
<p>Entre l'index et votre dépôt :</p>
<blockquote>
<p>$ git diff --staged</p>
</blockquote>
<p>Entre le répertoire de travail et le dépôt :</p>
<blockquote>
<p>$ git diff HEAD</p>
</blockquote>
<p><strong>Note</strong> : la notation HEAD se retrouve assez souvent (git-log, git-reset...)
quand on parle du dépôt, vu qu'il s'agit du commit courant, c'est à dire notre
position sur le graphe (l'index étant le prochain commit).</p>
<p>La commande permet de spécifier des fichiers ou des commits (ces deux
possibilités peuvent être combinées) :</p>
<blockquote>
<p>$ git diff -- monfichier</p>
<p>$ git diff commit</p>
</blockquote>
<p>Si vous voulez connaître la différence entre 2 commits :</p>
<blockquote>
<p>$ git diff commit1 commit2 </p>
</blockquote>
<p>Plus intéressant, si vous voulez savoir ce qui existe dans une branche et pas
dans l'autre :</p>
<blockquote>
<p>$ git diff commit1...commit2</p>
</blockquote>
<p>Cela se lit comme suit : affiche moi ce qui existe entre l'ancêtre commun aux
deux commits jusqu'au commit2 qui n'existe pas de l'ancêtre commun au commit1.</p>
<h2>Le contexte</h2>
<p>Par défaut, Git vous propose un contexte de 3 lignes, c'est à dire qu'il
affiche 3 lignes supplémentaires en dessous des changements pour vous donner
plus d'indications. Si vous trouvez cela insuffisant, voici 2 techniques
possibles :</p>
<ol>
<li>La 1ère est bien sûr d'augmenter le contexte avec l'option <code>-U</code></li>
</ol>
<blockquote>
<p>$ git diff -U5</p>
</blockquote>
<p>Pensez à faire un alias si vous préférez toujours disposer d'un contexte d'une
taille différente.</p>
<ol>
<li>Demander à Git la fonction qui contient la modification</li>
</ol>
<blockquote>
<p>$ git diff -W</p>
</blockquote>
<p>C'est une nouveauté de la version 1.7.8. Vu le nombre impressionnant de
langages il n'est pas sûr que Git se débrouille correctement mais d'après mes
premiers tests en Python, cela semble plûtot bien fonctionner.</p>
<h2>Ignorer les espaces</h2>
<p>Il est désagréable de voir son diff pourri parce qu'un collègue à aussi
supprimer des espaces. Vous avez à votre disposition les options <code>-b</code> <code>-w</code> pour
ignorer les espaces en fin de lignes ou toutes les espaces.</p>
<h2>Algorithme patience</h2>
<p>La commande implémente aussi un autre algorithme de détection de changement du
nom de <em>Patience</em>. Pour faire très court, cet algo se focalise uniquement sur
des lignes à fort contenu, alors que l'algorithme classique travaille sur
toutes les lignes. Il y'a des cas ou c'est intéressant de l'essayer (notamment
quand le diff classique est complètement perdu).</p>
<p><strong>Note</strong> : pour de plus amples explications, veuillez vous référer à cette
page <a href="http://bryanpendleton.blogspot.com/2010/05/patience-diff.html">ci</a> et à
celle <a href="http://alfedenzo.livejournal.com/170301.html">la</a>.</p>
<h2>Faire des statistiques</h2>
<p>Je vous laisse regarder par vous même les options <code>--stat</code>, <code>--numstat</code>,
<code>--shortstat</code>, <code>--dirstat</code> et <code>--summary</code> :).</p>
<h2>Afficher les différences sur la même ligne</h2>
<p>Il est intéressant, par exemple pour de la documentation, d'afficher les
modifications sur la même ligne. C'est tout l'intérêt du mode <em>word diff</em>.</p>
<blockquote>
<p>$ git diff --word-diff</p>
</blockquote>
<h2>Ne pas afficher les prefixes</h2>
<p>Ne pas afficher les a/ et b/, utilise quand on fait des copier / coller :</p>
<blockquote>
<p>$ git diff --no-prefix</p>
</blockquote>
<h2>Chercher une chaine dans le contenu</h2>
<p>Si vous cherchez une chaine particulière dans le contenu d'un commit (cad les
lignes qui ont été ajoutées ou supprimées), c'est l'option pickaxe qu'il vous
faut :</p>
<blockquote>
<p>$ git diff -Srenderer HEAD~10..HEAD</p>
</blockquote>
<p>Vous pouvez utiliser une expression rationnelle avec l'option <code>-G</code>.</p>
<p><strong>Note</strong> : l'option <code>--pickaxe-all</code> affiche l'ensemble du commit, et pas
uniquement les fichiers impactés.</p>
<h2>Générer un patch</h2>
<p>Le comportement par défaut de Git est de générer un patch :</p>
<blockquote>
<p>$ git diff &gt; diff.patch</p>
</blockquote>
<h2>Et encore plein d'autres options</h2>
<p>Comme d'habitude, je vous recommande chaudement de lire le manuel de la
commande tellement Git regorge d'options (notamment pour aider au scripting).
Je n'ai pas parlé de l'option <code>--check</code> pour vérifier les espaces inutiles, le
<code>-M</code> et le <code>-C</code> pour détecter copie et déplacement...</p>]]></content:encoded>
    </item>
    <item>
      <title>Retour sur un an de gitfr</title>
      <link>http://www.gitfr.net/blog/2012/01/10/retour-sur-un-an-de-gitfr</link>
      <pubDate>Tue, 10 Jan 2012 20:54:00 CET</pubDate>
      <category><![CDATA[gitfr]]></category>
      <guid isPermaLink="true">http://www.gitfr.net/blog/2012/01/10/retour-sur-un-an-de-gitfr</guid>
      <description>Retour sur un an de gitfr</description>
      <content:encoded><![CDATA[<p>Cela fait maintenant un peu plus d'un an que #gitfr existe (1ere conférence le
24 novembre 2010), il est donc temps de faire un petit point. D'abord quelques
chiffres :</p>
<ul>
<li>quelques centaines d'heures dépensées</li>
<li>13 conférences</li>
<li>~800 auditeurs aux conférences</li>
<li>~4000 visulisations sur parleys.com</li>
<li>86 billets de blog</li>
<li>plusieurs centaines de fotes d'ortografes</li>
<li>6 ateliers</li>
<li>~120 participants aux ateliers</li>
<li>7 jours de congés utilisés</li>
<li>0€ gagné</li>
</ul>
<p>Alors que l'objectif initial était de faire des ateliers, c'est précisemment
l'activité la plus faible. Je vois plusieurs raisons :</p>
<ul>
<li>
<p>Tout d'abord, participer à un atelier demande à comprendre un minimum Git. Il
  me semble inutile d'organiser un atelier sans que les participants soient
  d'abord conviés à la conférence.</p>
</li>
<li>
<p>Une conférence permet de faire venir des dizaines ou centaines de personnes,
  l'atelier est lui difficile à faire à plus de 30.</p>
</li>
<li>
<p>Un atelier est bien plus compliqué a organiser.</p>
</li>
<li>
<p>On m'a plus sollicité pour des conférences, tout simplement. Je n'ai plus
  le temps pour trouver des salles, je m'adapte aux demandes.</p>
</li>
</ul>
<p>De plus, j'avoue qu'après des dizaines d'heures dépensées pour monter une
conférence de qualité, ma motivation et mon énergie pour l'atelir avaient
diminués. Je dirais même que je redoutais un peu de faire des ateliers, car
cela demande bien plus de préparation. Avec 6 ateliers, et malgré une qualité
insuffisante à mes yeux sur les premiers, cette peur s'est estompée.</p>
<p>J'avoue aussi que l'activité du blog est assez faible, car je pense trop
souvent à faire des billets trop longs. Je vais donc tenter à l'avenir des
billets courts, même si cela nécessite de faire plusieurs billets sur le même
sujet. Et bien sûr, cela aussi du temps et de l'énergie.</p>
<p>Vous pouvez constater que #gitfr est une activité purement bénévole. Non
seulement, je n'ai pas gagné d'argent avec mais j'ai dépensé 7 jours de congés
payés pour les déplacements en province. C'est à ce titre que je demande au
minimum le remboursement des frais et une gratuité de l'évènement pour le
public : je me déplace uniquement si n'importe qui peut venir assister aux
conférences et aux ateliers. Que je ne gagne pas d'argent soit, mais je ne suis
pas là pour enrichir ou former une société ! #gitfr est et restera une
activité bénévole et gratuite, ce n'est pas dans son ADN de proposer des
ateliers payants (il faut pour cela se tourner vers des formateurs, je pense
d'ailleurs en faire une liste si cela est utile). Ceux qui me connaissent
savent parfaitement mon dégout pour les gens qui cachent leurs activités pro
sous des soit-disantes activités associatives. La séparation doit être nette et
étanche. Si vous souhaitez une conférence ou un atelier Git, n'hésitez donc pas
à demander, #gitfr répondra présent si les conditions le permet !</p>
<p>Et pour finir sur une note positive, je crois que la majorité des participants
ont appréciés les conférences et comprennent maintenant l'avantage d'utiliser
Git (et globalement les DVCS). C'est finalement le seul objectif de #gitfr :
montrer aux développeurs et aux managers qu'ils ont tout à gagner à revoir
leurs pratiques de gestion de source. Les DVCS ne sont pas l'avenir, ils sont
le présent. </p>]]></content:encoded>
    </item>
  </channel>
</rss>
