<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0"
     xmlns:content="http://purl.org/rss/1.0/modules/content/"
     xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
     xmlns:atom="http://www.w3.org/2005/Atom"
     xmlns:dc="http://purl.org/dc/elements/1.1/"
     xmlns:wfw="http://wellformedweb.org/CommentAPI/"
     >
  <channel>
    <title>#gitfr</title>
    <link>http://www.gitfr.net/blog</link>
    <description>Projet pour la promotion du bien et la destruction du mal</description>
    <pubDate>Sat, 01 Oct 2011 08:28:25 GMT</pubDate>
    <generator>Blogofile</generator>
    <sy:updatePeriod>hourly</sy:updatePeriod>
    <sy:updateFrequency>1</sy:updateFrequency>
    <item>
      <title>Présentation Git le 20/09 à Lyon</title>
      <link>http://www.gitfr.net/blog/2011/09/10/presentation-git-le-20-09-a-lyon</link>
      <pubDate>Sat, 10 Sep 2011 18:40:00 CEST</pubDate>
      <category><![CDATA[atelier]]></category>
      <category><![CDATA[gitfr]]></category>
      <guid isPermaLink="true">http://www.gitfr.net/blog/2011/09/10/presentation-git-le-20-09-a-lyon</guid>
      <description>Présentation Git le 20/09 à Lyon</description>
      <content:encoded><![CDATA[<p>GitFR continue son tour de France avec comme étape Lyon, grâce au
<a href="http://www.lyonjug.org/evenements/git">LyonJUG</a>.</p>
<p>Nous sommes en train de finaliser l'atelier Git qui aura lieu le lendemain, le
21 septembre. Atelier limité à 20 places. Stay tuned comme ont dit :).</p>
<p>Pour l'anectode, je participerai au podcast <a href="http://www.cast-it.fr/">Cast-It</a>.</p>]]></content:encoded>
    </item>
    <item>
      <title>Présentation Git le 01/06 à Strasbourg</title>
      <link>http://www.gitfr.net/blog/2011/05/18/presentation-git-le-01-06-a-strasbourg</link>
      <pubDate>Wed, 18 May 2011 13:25:00 CEST</pubDate>
      <category><![CDATA[atelier]]></category>
      <category><![CDATA[gitfr]]></category>
      <guid isPermaLink="true">http://www.gitfr.net/blog/2011/05/18/presentation-git-le-01-06-a-strasbourg</guid>
      <description>Présentation Git le 01/06 à Strasbourg</description>
      <content:encoded><![CDATA[<p><code>#gitfr</code> continue sa promotion de Git en allant cette fois ci à Strasbourg, invité par le <a href="http://www.elsassjug.org">ElsassJUG</a>, groupe de Javaistes Alascien. La soirée va être riche car je fusionne la présentation DVCS avec la présentation Git, ce qui devrait donner un contenu d'environ 2h. Comme nous avons la salle jusqu'a 22h30, une longue session de question / réponse est possible à la fin de chaque partie.</p>
<p>La soirée est limitée à 90 personnes, dans les locaux d'Alcatel-Lucent à Illkirch.</p>
<p>Pour s'inscrire, suivez ce <a href="http://jugevents.org/jugevents/event/38343">lien</a>.</p>
<p>A bientôt autour d'une bière Alsacienne ! :).</p>
<p>PS : Je n'avais pas prévu de me déplacer en province avant le Brezhcamp, mais le ElsassJUG avait déjà une soirée DVCS pour le mois de juin.</p>]]></content:encoded>
    </item>
    <item>
      <title>Atelier Git le 16/06 à Rennes</title>
      <link>http://www.gitfr.net/blog/2011/05/18/atelier-git-le-16-06-a-rennes</link>
      <pubDate>Wed, 18 May 2011 13:25:00 CEST</pubDate>
      <category><![CDATA[atelier]]></category>
      <category><![CDATA[gitfr]]></category>
      <guid isPermaLink="true">http://www.gitfr.net/blog/2011/05/18/atelier-git-le-16-06-a-rennes</guid>
      <description>Atelier Git le 16/06 à Rennes</description>
      <content:encoded><![CDATA[<p>Le <a href="http://www.breizhcamp.org/">breizhcamp</a> est une journée conférence organisée le 17 juin par plusieurs communautés techniques de Rennes avec des sessions sur Java, Ruby, Android, etc. Je suis présent à cette conférence pour 2 sessions : la keynote, avec pour thème les communautés et une session sur le langage Python.</p>
<p>Étant sur place, j'ai proposé aux organisateurs un atelier sur Git (étonnant non ?). Limité à <strong>40 personnes</strong> et organisé la veille (le 16 juin), l'objectif est de prendre par la main les participants, en partant de zéro et les amener à une maîtrise minimale de Git :</p>
<ul>
<li>On démarre par une présentation sur l'intérêt de passer aux DVCS,</li>
<li>suivi d'une présentation théorique sur Git,</li>
<li>Pour ensuite manipuler tous ensemble.</li>
</ul>
<p>Cela signifie que vous devez venir avec <strong>votre ordinateur</strong> équipé de Git si vous souhaitez participer à l'atelier. Vous pouvez bien sur assister seulement aux présentations ou regarder les autres manipuler.</p>
<p>Pour rappel, les tutoriels pour installer Git :</p>
<ul>
<li>http://blog.gitfr.net/post/1440298705/installer-git-sur-ubuntu</li>
<li>http://blog.gitfr.net/post/1449390263/installer-git-sur-os-x</li>
<li>http://blog.gitfr.net/post/1471591503/installer-git-sur-windows</li>
</ul>
<p>Je ne vous cache pas que je suis allergique à Windows (que je n'utilise plus personnellement et professionnellement depuis 1999) et que je suis donc beaucoup moins à l'aise sur cette plateforme. De plus, nous manipulerons principalement en ligne de commande et non au travers d'un quelconque IDE.</p>
<p>Suivez ce <a href="http://jugevents.org/jugevents/event/show.html?id=37556">lien</a> pour les inscriptions.</p>]]></content:encoded>
    </item>
    <item>
      <title>Git 1.7.5 publiée</title>
      <link>http://www.gitfr.net/blog/2011/04/25/git-1.7.5-publiee</link>
      <pubDate>Mon, 25 Apr 2011 04:10:00 CEST</pubDate>
      <category><![CDATA[git]]></category>
      <category><![CDATA[atelier]]></category>
      <guid isPermaLink="true">http://www.gitfr.net/blog/2011/04/25/git-1.7.5-publiee</guid>
      <description>Git 1.7.5 publiée</description>
      <content:encoded><![CDATA[<p>Nouvelle évolution de la banche 1.7.x avec cette 1.7.5.  Que pouvons nous dire sur cette nouvelle version qui contient plus de 500 commits de 70 contributeurs depuis la 1.7.4 ? Voici quelques changements intéressants à mes yeux :</p>
<ul>
<li>
<p>Le code est prêt pour l'internationalisation !</p>
</li>
<li>
<p>(<strong>maj</strong>) La commande <code>repo-config</code> (qui est un fait un alias de la commande <code>config</code>) est officiellement à éviter (<em>deprecated</em>).</p>
</li>
<li>
<p>Vous pouvez vous détacher d'une référence en faisant <code>git checkout --detach $reference</code>. C'est principalement pour inspection ou vérification.</p>
</li>
<li>
<p>(<strong>maj</strong>) Il est maintenant possible de spécifier une stratégie de merge lors d'un cherry-pick ou d'un revert.</p>
</li>
<li>
<p>La commande cherry-pick se souvient du commit ou s'est passé un conflit, permettant de continuer plus facilement.</p>
</li>
<li>
<p>Il est possible de visualiser 2 branches divergentes sans les changements équivalents avec les options <code>--cherry</code> et <code>--cherry-mark</code>.</p>
</li>
</ul>
<h2>Le changelog :</h2>
<ul>
<li>
<p>Various MinGW portability fixes.</p>
</li>
<li>
<p>Various git-p4 enhancements (in contrib).</p>
</li>
<li>
<p>Various vcs-svn, git-svn and gitk enhancements and fixes.</p>
</li>
<li>
<p>Various git-gui updates (0.14.0).</p>
</li>
<li>
<p>Update to more modern HP-UX port.</p>
</li>
<li>
<p>The codebase is getting prepared for i18n/l10n; no translated
  strings nor translation mechanism in the code yet, but the strings
  are being marked for l10n.</p>
</li>
<li>
<p>The bash completion script can now complete symmetric difference
  for "git diff" command, e.g. "git diff ...bra<TAB>".</p>
</li>
<li>
<p>The default minimum length of abbreviated and unique object names
  can now be configured by setting the core.abbrev configuration
  variable.</p>
</li>
<li>
<p>"git apply -v" reports offset lines when the patch does not apply at
  the exact location recorded in the diff output.</p>
</li>
<li>
<p>"git config" used to be also known as "git repo-config", but the old
  name is now officially deprecated.</p>
</li>
<li>
<p>"git checkout --detach <commit>" is a more user friendly synonym for
  "git checkout <commit>^0".</p>
</li>
<li>
<p>"git checkout" performed on detached HEAD gives a warning and
  advice when the commit being left behind will become unreachable from
  any branch or tag.</p>
</li>
<li>
<p>"git cherry-pick" and "git revert" can be told to use a custom merge
  strategy, similar to "git rebase".</p>
</li>
<li>
<p>"git cherry-pick" remembers which commit failed to apply when it is
  stopped by conflicts, making it unnecessary to use "commit -c $commit"
  to conclude it.</p>
</li>
<li>
<p>"git cvsimport" bails out immediately when the cvs server cannot be
  reached, without spewing unnecessary error messages that complain about
  the server response it never got.</p>
</li>
<li>
<p>"git fetch" vs "git upload-pack" transfer learned 'no-done'
  protocol extension to save one round-trip after the content
  negotiation is done. This saves one HTTP RPC, reducing the overall
  latency for a trivial fetch.</p>
</li>
<li>
<p>"git fetch" can be told to recursively fetch submodules on-demand.</p>
</li>
<li>
<p>"git grep -f <filename>" learned to treat "-" as "read from the
  standard input stream".</p>
</li>
<li>
<p>"git grep --no-index" did not honor pathspecs correctly, returning
  paths outside the specified area.</p>
</li>
<li>
<p>"git init" learned the --separate-git-dir option to allow the git
  directory for a new repository created elsewhere and linked via the
  gitdir mechanism. This is primarily to help submodule support later
  to switch between a branch of superproject that has the submodule
  and another that does not.</p>
</li>
<li>
<p>"git log" type commands now understand globbing pathspecs.  You
  can say "git log -- '*.txt'" for example.</p>
</li>
<li>
<p>"git log" family of commands learned --cherry and --cherry-mark
  options that can be used to view two diverged branches while omitting
  or highlighting equivalent changes that appear on both sides of a
  symmetric difference (e.g. "log --cherry A...B").</p>
</li>
<li>
<p>A lazy "git merge" that didn't say what to merge used to be an error.
  When run on a branch that has an upstream defined, however, the command
  now merges from the configured upstream.</p>
</li>
<li>
<p>"git mergetool" learned how to drive "beyond compare 3" as well.</p>
</li>
<li>
<p>"git rerere forget" without pathspec used to forget all the saved
  conflicts that relate to the current merge; it now requires you to
  give it pathspecs.</p>
</li>
<li>
<p>"git rev-list --objects $revs -- $pathspec" now limits the objects listed
  in its output properly with the pathspec, in preparation for narrow
  clones.</p>
</li>
<li>
<p>"git push" with no parameters gives better advice messages when
  "tracking" is used as the push.default semantics or there is no remote
  configured yet.</p>
</li>
<li>
<p>A possible value to the "push.default" configuration variable,
  'tracking', gained a synonym that more naturally describes what it
  does, 'upstream'.</p>
</li>
<li>
<p>"git rerere" learned a new subcommand "remaining" that is similar to
  "status" and lists the paths that had conflicts which are known to
  rerere, but excludes the paths that have already been marked as
  resolved in the index from its output.  "git mergetool" has been
  updated to use this facility.</p>
</li>
<li>
<p>"git fetch" from a client that is mostly following the remote
  needlessly told all of its refs to the server for both sides to
  compute the set of objects that need to be transferred efficiently,
  instead of stopping when the server heard enough. In a project with
  many tags, this turns out to be extremely wasteful, especially over
  the smart HTTP transport (sp/maint-{upload,fetch}-pack-stop-early~1).</p>
</li>
<li>
<p>"git fetch" run from a repository that uses the same repository as
  its alternate object store as the repository it is fetching from
  did not tell the server that it already has access to objects
  reachable from the refs in their common alternate object store,
  causing it to fetch unnecessary objects (jc/maint-fetch-alt).</p>
</li>
<li>
<p>"git remote add --mirror" created a configuration that is suitable for
  doing both a mirror fetch and a mirror push at the same time, which
  made little sense.  We now warn and require the command line to specify
  either --mirror=fetch or --mirror=push.</p>
</li>
</ul>]]></content:encoded>
    </item>
    <item>
      <title>Recherche de salles</title>
      <link>http://www.gitfr.net/blog/2011/04/24/recherche-de-salles</link>
      <pubDate>Sun, 24 Apr 2011 15:31:00 CEST</pubDate>
      <category><![CDATA[atelier]]></category>
      <category><![CDATA[gitfr]]></category>
      <guid isPermaLink="true">http://www.gitfr.net/blog/2011/04/24/recherche-de-salles</guid>
      <description>Recherche de salles</description>
      <content:encoded><![CDATA[<p>Le chiffre des inscrits à la soirée ParisJUG (420 si je me rappelle bien ce que m'a dit Antonio) montre l'intérêt pour Git. Et même si la vidéo est disponible sur le Net, je pense qu'il est intéressant de faire quelques sessions supplémentaires. Si vous avez à votre disposition une <strong>grande</strong> salle sur <strong>Paris</strong> (ou très proche), faites moi signe (<em>seb@gitfr.net</em>).</p>
<p>Je sais que c'est beaucoup demandé (grande salle + Paris), mais c'est l'unique moyen pour ne pas faire trop de sessions et permettre aux auditeurs de rentrer chez eux pas trop tard.</p>
<p>PS : Si vous êtes intéressé par une session en province, n'hésitez pas à me contacter.</p>]]></content:encoded>
    </item>
    <item>
      <title>Retour sur la soirée Git ParisJUG</title>
      <link>http://www.gitfr.net/blog/2011/04/23/retour-sur-la-soiree-git-parisjug</link>
      <pubDate>Sat, 23 Apr 2011 05:36:00 CEST</pubDate>
      <category><![CDATA[atelier]]></category>
      <category><![CDATA[gitfr]]></category>
      <guid isPermaLink="true">http://www.gitfr.net/blog/2011/04/23/retour-sur-la-soiree-git-parisjug</guid>
      <description>Retour sur la soirée Git ParisJUG</description>
      <content:encoded><![CDATA[<p>J'arrive vers 19h et des poussières, et je vois une file assez impressionnante de personnes qui attendent de rentrer. J'apprendrai plus tard que le système de réservation s'est gouré et n'a pas limité à 200 places comme d'habitude mais à... 300 ! L'équipe du ParisJUG s'est donc mis à la recherche d'un maximum de sièges (interdiction de rester dans le couloir ou par terre). Donc non seulement j'ai battu le record d'inscription (200 places parties en 3h, 120 personnes en liste d'attente), mais surement le nombre de personnes présentes à une conférence :). Signe que Git à le vent en poupe en France !</p>
<p>A cause d'une pause de 40mn en plein milieu de la soirée j'ai présenté Git en deux parties, de 55 minutes chacune. Le tout faisant 393 slides.</p>
<h2>La partie «théorie»</h2>
<p>J'ai épuré par rapport à l'atelier #1 et #2, pour me focaliser sur les points clés :</p>
<ul>
<li>Les objets (blob, tree, commit)</li>
<li>La base de données clé / valeur</li>
<li>Le SHA1</li>
<li>Le graphe (DAG)</li>
<li>Les références (tag et branche, distante et locale)</li>
<li>Un peu de théorie sur le merge (2 way merge, 3 way merge)</li>
</ul>
<p>La difficulté est que l'auditeur lambda ne connait pas les DVCS, la notion de graphe (le DAG) n'est donc <strong>pas maitrisée</strong>. Venant de svn, ils ne connaissent que le graphe à une branche (que j'appelle un <strong>graphe dégénéré</strong>). C'est à cause de ce graphe unaire que les merges sont difficiles. Inversement, le DVCS ayant une <strong>vue globale</strong> de l'historique, il est plus à même de vous faciliter la vie avec de nombreuses commandes et de prendre les bonnes décisions.</p>
<p>Les points fondamentaux que j'ai tenté de faire passer : </p>
<ul>
<li>Git est avant tout bien pensé conceptuellement. Complexe de prime abord, la compréhension de Git est grandement amélioré en abordant chaque concept individuellement.</li>
<li>Git permet de modifier le graphe dans tous les sens. C'est le <strong>gros</strong> avantage sur ses concurrents.</li>
<li>Le travail collaboratif est simplifié avec les références distantes, permettant d'avoir N versions d'un projet sur son dépôt.</li>
</ul>
<p>Et surtout que Git n'est <strong>pas</strong> l'outil magique que l'on peut croire, il n'est qu'un <strong>outil stupide</strong> qu'il ne fait que ce qu'on lui ordonne. Mais il a l'avantage de disposer des fonctionnalités qu'on est en droit d'attendre en 2011. <strong>Svn est dépassé</strong>, pas besoin de tortiller du cul (j'aime bien cette expression un poil vulgaire).</p>
<h2>La partie «pratique»</h2>
<p>Cette partie avait pour but de mettre les pieds à l'étrier, en donnant des conseils et quelques astuces. J'ai pensé à parler des commandes de base, ou à faire une démo en «live», mais après quelques essais, je n'était pas satisfait. J'ai donc joué la carte du <strong>faire envie</strong>. J'ai parlé de quelques commandes que j'adore comme le <code>add -p</code> ou le <code>rebase -i</code>. </p>
<p>Mais surtout, le point clé de cette partie est de montrer l'utilité de modifier aussi facilement le graphe pour disposer d'un historique «propre». Cette notion étant mouvante dans le temps, on peut à tout moment revoir cette historique pour le rendre conforme à ses souhaits. Disposer de <strong>commits  unitaires</strong> facilitant la compréhension des changements, des <strong>multiples branches</strong> pour différencier les travaux au cours du temps et leurs intégrations, le tout donc dans un graphe facile à comprendre. est un avantage <strong>indéniable</strong> de Git. C'est de mon point de vue, ce qu'il l'emporte sur <em>Hg</em>. Car ce dernier est (aussi) bien pensé, (plus) facile à utiliser et diablement efficace, même si la gestion des branches est un poil simpliste.</p>
<p>J'ai aussi parlé des Workflows et rapidement des outils graphiques et de GitHub.</p>
<h2>Conclusion</h2>
<p>De l'avis de toutes les personnes qui ont vu mes premières présentations, celle ci est bien mieux construite. Mon travail à donc payé (j'ai passé quelque chose comme 20h, si ce n'est pas plus). J'ai aussi accompagné les auditeurs pendant 2h, la pause aidant sur ce point.</p>
<p>Mais si j'ai bien réussi la partie théorique, je dois encore améliorer la partie pratique en enlevant quelques commandes peu pertinentes et me focaliser sur l'intérêt de modifier le graphe à travers des exemples intéressants : l'avantage du décentralisé en travaillant tranquillement sur son dépôt, le travail collaboratif, le fait de revoir son historique au bout de plusieurs semaines de travail, etc.</p>
<p>Bref, beaucoup de positif, mais encore du travail pour une meilleur ROI de l'auditeur :).</p>]]></content:encoded>
    </item>
    <item>
      <title>Vidéo de la soirée Git</title>
      <link>http://www.gitfr.net/blog/2011/04/22/video-de-la-soiree-git</link>
      <pubDate>Fri, 22 Apr 2011 14:08:00 CEST</pubDate>
      <category><![CDATA[atelier]]></category>
      <category><![CDATA[gitfr]]></category>
      <guid isPermaLink="true">http://www.gitfr.net/blog/2011/04/22/video-de-la-soiree-git</guid>
      <description>Vidéo de la soirée Git</description>
      <content:encoded><![CDATA[<p>Bonne nouvelle si vous avez raté la soirée Git, les parties <a href="http://www.parleys.com/#st=5&amp;id=2366">théorique</a> et <a href="http://www.parleys.com/#st=5&amp;id=2368">pratique</a> sont disponibles sur le site <strong>parleys.com</strong>. La qualité semble bonne et je suis audible, mais ne supportant pas de me voir ou de m'entendre, ne m'en demandez pas plus :).</p>
<p>N'hésitez pas à faire un retour, j'ai surement plein de points à améliorer. Et pour ceux qui ne me connaissent pas, j'aime beaucoup le second degrés (voir le troisième, le quatrième...). Ne me prenez donc pas trop au sérieux, enfin sauf pour svn, ou je suis <strong>très</strong> sérieux.</p>
<p>PS : merci à l'équipe du ParisJUG pour le boulot <strong>énorme</strong> que cela doit être !</p>]]></content:encoded>
    </item>
    <item>
      <title>Untitled - 2011-10-01 10:28:24</title>
      <link>http://www.gitfr.net/blog/2011/04/07/info-sur-la-presentation-du-12-04</link>
      <pubDate>Thu, 07 Apr 2011 16:05:00 CEST</pubDate>
      <category><![CDATA[atelier]]></category>
      <category><![CDATA[gitfr]]></category>
      <guid isPermaLink="true">http://www.gitfr.net/blog/2011/04/07/info-sur-la-presentation-du-12-04</guid>
      <description>Untitled - 2011-10-01 10:28:24</description>
      <content:encoded><![CDATA[<p>J'avais préparé mon billet à l'avance, histoire de le publier ce matin. Mais voila, le temps d'y penser, les <strong>200 places étaient parties</strong> ! Diantre, Git à vraiment la côte, on a battu le record de vitesse des inscriptions (moins de 4h). Pour la postérité, voici le billet initial :</p>
<p>C'est parti ! Vous pouvez vous <strong>inscrire</strong> pour la <a href="http://www.parisjug.org/xwiki/bin/view/Meeting/20110412">présentation Git</a> de mardi prochain (l'inscription est obligatoire). J'ai profondément <strong>remanié</strong> l'ensemble pour être plus concis sur la partie théorique et laisser plus de place pour l'utilisation de Git : quelques conseils et astuces, les commandes qui me font aimer Git, les workflows, GitHub, le travail collaboratif...</p>
<p>Je pense même que ceux qui ont vu l'atelier #1 et #2 peuvent apprendre des choses :). A cause du buffet en plein milieu, le déroulement est simple : 1h théorique, buffet et enfin 1h pratique.</p>
<p>Et petite surprise, il y aura un jeu concours du sponsor de la soirée (questions sur Git et sur Java, ben oui <em>ParisJUG</em>, c'est pour Paris <strong>Java</strong> Users Group).</p>]]></content:encoded>
    </item>
    <item>
      <title>Présentation Git le 12/04 à Paris</title>
      <link>http://www.gitfr.net/blog/2011/03/23/presentation-git-le-12-04-a-paris</link>
      <pubDate>Wed, 23 Mar 2011 14:13:00 CET</pubDate>
      <category><![CDATA[atelier]]></category>
      <category><![CDATA[gitfr]]></category>
      <guid isPermaLink="true">http://www.gitfr.net/blog/2011/03/23/presentation-git-le-12-04-a-paris</guid>
      <description>Présentation Git le 12/04 à Paris</description>
      <content:encoded><![CDATA[<p>Aprés des vacances bien méritées, GitFR reprend son bâton de pèlerin pour présenter Git au <a href="http://www.parisjug.org/xwiki/bin/view/Meeting/20110412">ParisJUG</a>. Git est à l'honneur puisque c'est l'unique sujet de la soirée.</p>
<p>La présentation sera proche de l'atelier #1 et #2, mais en mettant l'accent sur :</p>
<ul>
<li>mon retour d'expérience </li>
<li>les workflows possibles</li>
</ul>
<p>Si vous avez raté les premiers épisodes, c'est le moment de se rattraper :).</p>
<p><strong>Update</strong> : l'inscription (obligatoire) s'ouvre le jeudi 07/04 à 7h. Généralement, les 200 places partent assez vite (dans la journée). Autre possibilité pour les téméraires : les places disponibles sont libérées 5mn avant le début de la présentation. Je vous conseille d'arriver assez tôt pour être devant :).</p>]]></content:encoded>
    </item>
    <item>
      <title>Retour sur les ateliers</title>
      <link>http://www.gitfr.net/blog/2010/12/04/retour-sur-les-ateliers-1-et-2</link>
      <pubDate>Sat, 04 Dec 2010 23:39:00 CET</pubDate>
      <category><![CDATA[atelier]]></category>
      <category><![CDATA[gitfr]]></category>
      <guid isPermaLink="true">http://www.gitfr.net/blog/2010/12/04/retour-sur-les-ateliers-1-et-2</guid>
      <description>Retour sur les ateliers</description>
      <content:encoded><![CDATA[<p>Voila donc les ateliers #1 et #2 passés, il est donc temps de faire un point. A la base, c'est une simple envie de partager mon enthousiaste sur Git à quelques connaissances, et cela s'est transformé en présentation à <strong>150</strong> personnes. D'ailleurs, on m'a demandé d'en faire d'autres, vous risquez donc de me voir ici ou là en 2011 :).</p>
<h2>Approche adoptée</h2>
<p>L'objectif est de donner une vision globale de  Git, contrairement aux présentations «classiques» que j'ai pu voir, généralement focalisées sur les commandes de bases. J'ai donc tenter de conceptualiser Git au travers de 3 points :</p>
<ol>
<li>la gestion de contenu</li>
<li>le graphe des commits (le DAG)</li>
<li>les références</li>
</ol>
<p>Et en m'attachant à présenter chaque concept complètement, par exemple la base de données clé / valeur, que l'on voit uniquement dans les présentations avancées. C'est ce que je considère comme la première étape dans la maitrise de Git. S'ensuit :</p>
<ul>
<li>la connaissance des commandes de bases pour manipuler ces 3 concepts</li>
<li>et enfin, la capacité à adapter Git à ses besoins (Git Fu)</li>
</ul>
<p>Avec le recul, c'est une approche assez osée. Mais c'était la seule que je juge, encore maintenant, valable : parler des commandes me semblait dérisoire. A quoi bon s'attacher à parler de <code>git checkout -b</code> quand on ne sait pas ce qu'est un graphe et qu'une branche n'est rien d'autre qu'une référence sur un <em>noeud</em> de ce même graphe ? Le but de la présentation est de permettre un <strong>apprentissage</strong> complet de l'outil, pas seulement de donner une vision parcellaire.</p>
<p>Les retours sont plutôt bons (même excellents, mais je me méfie toujours des gens qui ne parlent pas, c'est souvent eux qui n'ont pas appréciés mais qui par gentillesse ne le disent pas). J'attends les retours papiers de Valtech, mais j'ai reçu une bonne soixantaine de félicitations, plus ceux des gens qui ont vu la présentation uniquement sur le Net. En résumé, l'approche semble bonne. Et ça c'est cool.</p>
<h2>Git, le point d'entrée</h2>
<p>J'ai souhaité (re)parler de Workflow (cf ma <a href="http://www.parisjug.org/xwiki/bin/view/Meeting/20100511">présentation DVCS au ParisJUG</a>), qui se trouve d'ailleurs en introduction de la présentation. Git, comme tout SCM (outil de gestion de source), doit être maitrisé avant d'aller plus loin ? Plus loin dans quoi ? Dans la capacité d'une équipe à livrer pardi ! Sans maitrise de votre SCM, point d'intégration continue, point de démo fréquente, et encore moins de livraison fréquente. L'objectif de #gitfr à toujours été pour moi d'aller plus loin que Git et d'échanger autour de la mise en place d'une chaine allant du développement à la mise en production. Chaine que l'on appelle maintenant <strong>devop</strong> (développement -&gt; Q/A -&gt; production).</p>
<p>A l'atelier #1, je me suis focalisé principalement sur les concepts Git. Puis à l'atelier #2, j'ai abordé plus longuement les <strong>techniques de collaboration</strong> et de <strong>mise en production</strong>. Je pense aller plus loin pour les prochaines éditions, mais en 2h seulement, difficile de tout aborder de manière suffisamment claire.</p>
<p>Plusieurs personnes ont manifestées un vif intérêt pour le devop, et je pense en parler abondamment en 2011. J'ai d'ailleurs un <a href="http://groups.google.com/group/paris-devops/browse_thread/thread/7619021dfdbdd851">début d'expérience assez intéressant à partager</a>.</p>
<h2>La forme</h2>
<p>Pour compenser une présentation théorique, il fallait miser à fond sur la représentation graphique. Et la, <a href="http://twitter.com/chacon">Chacon</a> est venu à mon secours. Le fondateur de <strong>GitHub</strong> fait des présentations Git depuis 3 ans maintenant, et j'ai pris ici et la les dessins dont j'avais besoin (pour l'anectode, j'ai tapé dans dix présentations différentes). Je pense que l'apport des dessins dans cette présentation est similaire à la musique dans Star Wars : un <strong>énorme</strong> plus.</p>
<p>Par contre, certains dessins étaient trop chargés par rapport à ce que je tentais d'expliquer. Une amélioration notable serait de faire moi même mes dessins. Je vais donc me former sur <strong>Inkscape</strong> (je suis sous Linux). Il faut noter que Chacon propose ses dessins dans le format original, malheureusement avec une application uniquement disponible sous Mac OS X.</p>
<p>Autre point notable, le nombre de slides : <em>338</em> pour l'atelier #1, <em>308</em> pour l'atelier #2 (j'ai supprimé quelques slides qui me semblaient peu utiles avec l'expérience de la première présentation). Soit plus d'un slide à minute. Cela faisait longtemps que je revais de ce genre de présentation : rapide, virevoltante, avec des slides trés légers, aérés... Une présentation <strong>Zen</strong> en sommes. Et cela, sans trop sacrifié au visuel.</p>
<p>Depuis des années (je fais pas mal de présentations en interne), mon outil était <strong>Impress</strong> de la suite <em>OpenOffice.org</em>. Oh, ce n'est pas que j'aimais cet outil (j'ai horreur des outils bureautiques), mais je n'avais guere le choix de mon point vue : je voulais un outil simple d'utilisation, sans avoir à connaitre trop de choses techniques, me permettant de me concenter au maximum sur le contenu (et surement un poil de feignantise de ma part à apprendre un nouvel outil). Et c'est à la conférence <strong>OSDC.fr</strong> 2011, conférence parrainée par 3 associations : <em>Mongueurs de Perl</em>, <em>Ruby France</em> et <em>AFPy</em> (Association Francophone Python, je suis administrateur de cette dernière). que j'ai pu voir une présentation par le CTO de GitHub (c'était à la base Chacon qui devait venir, malheureusement il a eut un empêchement). C'est à ce moment la que j'ai découvert l'outil <a href="https://github.com/schacon/showoff">ShowOff</a> en action. Et pour l'anectode, c'est un Perliste qui m'a donné l'info, moi Pythonien alors que c'est outil codé en Ruby :).</p>
<p>C'est un outil qui permet d'écrire le contenu au format <a href="http://daringfireball.net/projects/markdown/">Markdown</a>, trés employé dans le monde Ruby. Il existe un équivalent dans le monde Python : <strong>ReST</strong>, bien plus avancée mais malheureusement moins connu. Pour info, le format Markdown est trés employé sur GitHub, puisqu'il est utilisable un peu partout (Gist, Wiki, doc sur le dépôt...). Pour écrire un slide, cela se résume à :</p>
<blockquote>
<p>!SLIDE</p>
<p>Ceci est mon texte</p>
</blockquote>
<p>Comme vous pouvez le constater, c'est trés simple. Il ne reste plus qu'a écrire votre fichier <em>CSS</em> pour spécifier la taille de vos fontes, les couleurs de bases, etc. Je vous laisse étudier la documentation pour en savoir plus. Moi, <strong>Unixien</strong> pur jus, adepte de la <strong>ligne de commande</strong> et du <strong>fichier texte</strong>, je suis aux anges. Adieu OpenOffice.org Impress complètement buggé (essayez de faire un drag &amp; drop pour déplacer un slide par exemple), adieu les 80% de mon temps focalisé sur la mise en page, adieu utilisation de la souris... Point non négligeable, il est possible de découper en morceaux sur le disque (par exemple, 1 section = 1 répertoire) sans rien paraitre. Reprendre une section éxistante dans une nouvelle présentation se résume donc... à copier un répertoire. Bref j'aime.</p>
<p>Bien évidemment, le tout est versionné dans un dépôt Git (et backupé avec <a href="http://www.dropbox.com">Dropbox</a> pour être complet sur le sujet).</p>
<p>A la conférence <a href="http://www.soft-shake.ch/">Soft-Shake</a> à Genève, j'ai  présenté 254 slides en une heure (plus de <strong>4 slides à la minute !</strong>). Mais tout n'est pas parfait, ce genre de présentations :</p>
<ul>
<li>demande de connaitre vos slides sur les bout des doigts pour bien gérer les transitions. Vous pouvez ajouter des aides (des slides qui ont pour but de vous rappeler ce qu'il faut dire) mais cela ne compense pas la nécessité de bien se souvenir de l'ensemble des slides.</li>
<li>peut être perturbant pour ceux qui ont du mal à suivre, puisque les slides s'enchainent vite.</li>
</ul>
<p>De plus, réviser une présentation de 2h demande <strong>beaucoup</strong> de temps. Répêter 2 fois la présentation (ce qui n'est pas beaucoup, idéalement il faut le faire une bonne dizaine de fois) par exemple signifie donc... 4h.</p>
<p>Autre soucis, cela fait maintenant 3x que je fais une présentation Git. J'ai donc récité (au bas mot) certains slides 30x. C'est dur de se mettre à la place d'un orateur qui voit les slides pour la 1ere fois (cela s'appelle la <strong>malédiction du savoir</strong>) : parler lentement, bien expliquer. Je suis passé trop vite sur certains slides, surtout à l'atelier #2.</p>
<p>Malgré tout, aprés 3 expériences, les retours sur le format sont encore une fois, trés positifs. Les gens semblent même en redemander ! A titre personnel, je suis contre les présentations lourdes (avec de <strong>slideuement</strong>, des <em>slides documents</em>), ou l'orateur passe plus de temps à lire son texte qu'a présenter ses idées.</p>
<p>A noter : l'utilisation d'un prisonnier à fait tiquer, en me demandant de ne pas exploiter la souffrance des autres. J'ai trouvé la remarque étrange, tout le monde ayant compris que j'exploitais le coté tordu du personnage, et non la tragédie de la guerre. Comme quoi, faut penser à tout.</p>
<h2>L'orateur</h2>
<p>Bon, malgré les félicitations des uns et des autres, j'ai encore beaucoup à apprendre pour faire une bonne pres. Et pour cause, c'est bien l'orateur qui fait le succés, pas les slides ! Il est nécessaire d'être calme, détendu, ouvert sur son public. J'apprécie par exemple beaucoup le calme de <a href="http://www.regismedina.com/about">Régis Médina</a>, parlant d'une voix posée. Moi je stresse trop, bouffant la moitié des mots... Une catastrophe (bon j'ai quelques raisons médicales pour expliquer mon stress, mais l'auditeur en a un peu rien à foutre, il est la pour avoir la meilleure expérience possible).</p>
<p>A ma décharge, c'était ma 5eme et 6eme présentation publique (au ParisJUG, c'était ma 2eme). Il n'y a pas de secret, il faut travailler et multiplier les présentations pour s'améliorer. Scott berkun, orateur et écrivain connu explique dans son livre <a href="http://www.amazon.com/gp/product/B002VL1CGM/">Confessions of a public speaker</a> que la peur d'être seul sur scène, devant des dizaines de personnes est naturelle. Il faut la dompter, l'apprivoiser. C'est bien ce qui me reste à faire ! Néanmoins, il parait que ne se voit pas trop que je débute. Tant mieux :).</p>
<h2>La suite ?</h2>
<p>Beaucoup de mains se sont levées pour souhaiter des ateliers. Je suis donc à la recherche de locaux (si possible) sur Paris avec tables, chaises et du réseau pour 20/25 personnes. Je pense faire 3/4 ateliers débutants, 3 ateliers intermédiaires et 1/2 ateliers avancés. Si votre entreprise peut accueillir, faites moi signe (<strong>seb@gitfr.net</strong>). Je rappelle également que je suis intéressé pour présenter Git et devop à des entreprises. Aider les organisations à être plus efficace étant mon dada.</p>
<h2>Conclusion</h2>
<p>Du positif ! Les gens semblent <strong>contents</strong> et moi j'apprends Git en profondeur, ce qui est mon objectif personnel. Mais pas le temps de se réposer, il faut bosser sur l'atelier <strong>initiation</strong>.</p>
<p>Je suis preneur d'avis et de critiques, n'hésitez donc à poser un commentaire sur le blog, même si c'est trés négatif :).</p>]]></content:encoded>
    </item>
  </channel>
</rss>
