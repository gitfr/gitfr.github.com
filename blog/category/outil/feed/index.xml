<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0"
     xmlns:content="http://purl.org/rss/1.0/modules/content/"
     xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
     xmlns:atom="http://www.w3.org/2005/Atom"
     xmlns:dc="http://purl.org/dc/elements/1.1/"
     xmlns:wfw="http://wellformedweb.org/CommentAPI/"
     >
  <channel>
    <title>#gitfr</title>
    <link>http://www.gitfr.net/blog</link>
    <description>Projet pour la promotion du bien et la destruction du mal</description>
    <pubDate>Thu, 01 Dec 2011 11:47:35 GMT</pubDate>
    <generator>Blogofile</generator>
    <sy:updatePeriod>hourly</sy:updatePeriod>
    <sy:updateFrequency>1</sy:updateFrequency>
    <item>
      <title>git blameall</title>
      <link>http://www.gitfr.net/blog/2011/06/13/git-blameall</link>
      <pubDate>Mon, 13 Jun 2011 02:22:00 CEST</pubDate>
      <category><![CDATA[git]]></category>
      <category><![CDATA[outil]]></category>
      <guid isPermaLink="true">http://www.gitfr.net/blog/2011/06/13/git-blameall</guid>
      <description>git blameall</description>
      <content:encoded><![CDATA[<p>Vous connaissez surement la commande <code>blame</code>, présent dans tous les outils de gestion de source, et qui permet de connaitre l'auteur de chaque ligne d'un fichier. Dan Gindikin nous gratifie de <a href="http://1dan.org/git-blameall/">git-blameall</a>, un petit script en Python (il faut donc qu'un interpréteur Python soit présent sur votre système, ce qui est le cas par défaut sur Linux et MacOS) qui permet d'avoir la mếme information pour toutes les lignes qui ont existées dans l'histoire de ce fichier.</p>
<p>Vous avez donc une colonne supplémentaire qui vous donne le SHA1 ou cette ligne fut effacée. A garder sous le coude !</p>
<p>Voici une copie d'écran :</p>
<p><img alt="" src="http://1dan.org/git-blameall/git-blameall-screen1.png" /></p>]]></content:encoded>
    </item>
    <item>
      <title>cgit, un frontal Web pour Git</title>
      <link>http://www.gitfr.net/blog/2011/04/03/cgit-un-frontal-web-pour-git</link>
      <pubDate>Sun, 03 Apr 2011 15:16:00 CEST</pubDate>
      <category><![CDATA[git]]></category>
      <category><![CDATA[outil]]></category>
      <guid isPermaLink="true">http://www.gitfr.net/blog/2011/04/03/cgit-un-frontal-web-pour-git</guid>
      <description>cgit, un frontal Web pour Git</description>
      <content:encoded><![CDATA[<p>Quand vous installez un dépôt Git sur votre serveur, il est toujours intéressant d'installer en plus un frontal Web. Cela vous permet notamment de naviguer dans votre dépôt sans avoir besoin de le cloner, de télécharger une version, ou tout simplement de connaitre l'état du dépôt.</p>
<p>Le frontal fournit avec Git est <a href="https://git.wiki.kernel.org/index.php/Gitweb">Gitweb</a>, écrit en Perl et utilisable en cgi. Mais son interface est un peu désuete, et les fonctionnalités limitées (je vous laisse juge en naviguant sur <a href="http://git.kernel.org/">le dépôt Git</a>).</p>
<p><a href="http://hjemli.net/git/cgit">cgit</a> tente de combler ces lacunes en offrant plusieurs fonctionnalités intéressantes :</p>
<ul>
<li>
<p>Une interface un peu plus propre et claire.</p>
</li>
<li>
<p>Un cache pour une navigation rapide (mais il est déja bien plus rapide que gitweb sans l'activer).</p>
</li>
<li>
<p>La possibilité de visualiser les différences plus facilement (side-by-side diffs).</p>
</li>
<li>
<p>flux RSS.</p>
</li>
<li>
<p>La découverte automatique de dépôts à la configuration.</p>
</li>
<li>
<p>La colorisation syntaxique.</p>
</li>
</ul>
<p>Il est très facile à configurer. Pour l'installation, téléchargez l'archive et tapez la commande <em>make</em> pour générer le binaire en C. Il suffit ensuite de l'utiliser comme un cgi. Lisez la documentation fournie pour connaître les options du fichier de configuration.</p>
<p>Je vous laisse regarder la différence entre les deux, mais pour moi, c'est évident que cgit est plus intéressant. C'est pour cette raison qu'il est utilisé par défaut au taff :)</p>]]></content:encoded>
    </item>
    <item>
      <title>Historiser /etc avec etckeeper</title>
      <link>http://www.gitfr.net/blog/2010/12/05/historiser-etc-avec-etckeeper</link>
      <pubDate>Sun, 05 Dec 2010 01:05:00 CET</pubDate>
      <category><![CDATA[git]]></category>
      <category><![CDATA[outil]]></category>
      <guid isPermaLink="true">http://www.gitfr.net/blog/2010/12/05/historiser-etc-avec-etckeeper</guid>
      <description>Historiser /etc avec etckeeper</description>
      <content:encoded><![CDATA[<p>Pour illuster l'un des intérêts des <em>DVCS</em>, à savoir son coté <strong>décentralisé</strong>, ou plus éxactement le fait qu'il n'est pas obligatoire de disposer d'un dépôt central, voici un exemple concret. Nous pouvons historiser simplement un répertoire en tapant la commande :</p>
<blockquote>
<p>$ git init</p>
</blockquote>
<p>Ainsi, vous pouvez sauvegarder toute modification apportée à un fichier et historiser vos changements. Mais si vous voulez le faire simplement et <strong>automatiquement</strong>, il faut scripter un peu. Mais comme souvent dans le monde libre, un développeur à pensé avant vous, s'est sorti les doigts du <em>censure</em> et a publié son projet.</p>
<p><a href="http://kitenet.net/~joey/code/etckeeper/">etckeeper</a>, projet de Joey Hess (bien connu des utilisateurs Debian) permet comme son nom l'indique de sauvegarder le répertoire <code>/etc</code> (ensemble des fichiers de configurations sous <em>Linux</em>), simplement et rapidement. Joey est un vieux utilisateur d'outil de gestion de sources pour sauvegarder ses documents : il a écrit un article voici quelques années sur l'utilisation de <em>CVS</em> puis <em>SVN</em> pour gérer son répertoire personnel (son <strong>home</strong>).</p>
<p>Pour l'installer (sous <em>Ubuntu</em> ou <em>Debian</em>) :</p>
<blockquote>
<p>$ aptitude install etckeeper</p>
</blockquote>
<p>Le fichier de configuration s'appelle <code>/etc/etckeeper/etckeeper.conf</code>, notamment pour mettre git en backend. L'intérêt de etckeeper se trouve dans les scripts associés, puisqu'il traque les changements de paquet avec <strong>APT</strong> et <strong>DPKG</strong> et gére les permissions correctement (fondamental pour /etc/).</p>
<p>Et voila ! Vous avez maintenant un historique des changements sur votre machine.</p>
<p><strong>Note</strong> : etckeeper gère aussi <em>Hg</em>, <em>Darcs</em> et <em>Bzr</em>.</p>]]></content:encoded>
    </item>
    <item>
      <title>Les GUI sous MacOS X</title>
      <link>http://www.gitfr.net/blog/2010/11/30/les-gui-sous-macos-x</link>
      <pubDate>Tue, 30 Nov 2010 00:18:00 CET</pubDate>
      <category><![CDATA[macos]]></category>
      <category><![CDATA[git]]></category>
      <category><![CDATA[outil]]></category>
      <guid isPermaLink="true">http://www.gitfr.net/blog/2010/11/30/les-gui-sous-macos-x</guid>
      <description>Les GUI sous MacOS X</description>
      <content:encoded><![CDATA[<p>Mon ami <em>Thomas</em>, Rubyiste Maceux ascendant foie gras (il habite Toulouse) nous fait un rapide tour d'horizon des <a href="http://blog.arbousier.info/11-29-2010/GitOsX.html">applications graphiques</a> sous <strong>Mac OS X</strong>.</p>
<p>Au programme :</p>
<ul>
<li>Gitnub</li>
<li>GitX</li>
<li>GitY</li>
<li>Gitbox</li>
<li>Tower</li>
</ul>]]></content:encoded>
    </item>
  </channel>
</rss>
